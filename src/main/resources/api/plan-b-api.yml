swagger: '2.0'

info:
  title: Plan B API
  description: API for managing clients, users and their credentials
  version: "1.0"

securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: none
    scopes:
      uid: user identitiy

security:
  - oauth2:
    - uid

paths:
  /raw-sync/clients/{realm}/{id}:
    put:
      summary: Save client
      description: |
        Creates or overrides a client and all of its properties
      tags:
        - Clients
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/Client'
      responses:
        200:
          description: Client has been saved
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

    patch:
      summary: Save client properties
      description: |
        Updates the given client properties
      tags:
        - Clients
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/Client'
      responses:
        200:
          description: Client has been updated
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

    delete:
      summary: Delete a client
      description: |
        Remove a client completely.
        Deleted clients won't be able to authenticate anymore.
      tags:
        - Clients
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: Client has been deleted
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

  /raw-sync/users/{realm}/{id}:
    put:
      summary: Save user
      description: |
        Creates or overrides a user and all of its properties
      tags:
        - Users
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/User'
      responses:
        200:
          description: User has been saved
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

    patch:
      summary: Save user properties
      description: |
        Updates the given user properties
      tags:
        - Users
      consumes:
        - application/json
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/User'
      responses:
        200:
          description: User has been updated
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

    delete:
      summary: Delete a user
      description: |
        Remove a user completely.
        Deleted users won't be able to authenticate anymore.
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
      responses:
        200:
          description: User has been deleted
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

  /raw-sync/users/{realm}/{id}/password:
    post:
      summary: add password
      description: |
        Add the given password to the list of valid passwords of this user
      tags:
        - Users
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Id'
        - $ref: '#/parameters/Password'
      responses:
        201:
          description: The password has successfully been saved
        400:
          description: Bad request
          schema:
            $ref:  '#/definitions/Error'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

  /consents/{realm}/{username}/{client_id}:
    get:
      summary: obtain consents
      description: |
        Obtain the stored consents for a given realm, user and client id
      tags:
        - Consents
      parameters:
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/Username'
        - $ref: '#/parameters/ClientId'
      responses:
        200:
          description: The stored consent has successfully been obtained
          schema:
            $ref:  '#/definitions/Consent'
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'

    delete:
      summary: delete consents
      description: |
       Delete consents for a given realm, user and client id
      tags:
        - Consents
      parameters:
        - $ref: '#/parameters/Username'
        - $ref: '#/parameters/Realm'
        - $ref: '#/parameters/ClientId'
      responses:
        204:
          description: The consent has successfully been withdrawn
        401:
          description: Unauthorized request
          schema:
            $ref:  '#/definitions/Error'
            
parameters:

  Realm:
    name: realm
    in: path
    required: true
    type: string

  Id:
    name: id
    in: path
    required: true
    type: string

  ClientId:
    name: client_id
    in: path
    required: true
    type: string

  Username:
    name: username
    in: path
    required: true
    type: string

  Client:
    name: client
    in: body
    required: true
    schema:
      $ref: '#/definitions/Client'

  User:
    name: user
    in: body
    required: true
    schema:
      $ref: '#/definitions/User'

  Password:
    name: password
    in: body
    required: true
    schema:
      $ref: '#/definitions/Password'

definitions:

  Client:
    type: object
    properties:
      secret_hash:
        type: string
        description: Base64-encoded Bcrypt hash of the client secret
      scopes:
        type: array
        items:
          type: string
      is_confidential:
        type: boolean
      name:
        type: string
        description: Human readable client name for authorization flow
      description:
        type: string
        description: Human readable description for authorization flow
      redirect_uris:
        type: array
        items:
          type: string

  User:
    type: object
    properties:
      password_hashes:
        type: array
        items:
          type: string
          description: Base64-encoded Bcrypt hash of the password
      scopes:
        type: object

  Password:
    type: object
    properties:
      password_hash:
        type: string
        description: Base64-encoded Bcrypt hash of the password

  Consent:
    type: object
    properties:
      scopes:
        type: array
        items:
          type: string
          description: Stored consents

  Error:
    properties:
      error:
        type: string
      error_description:
        type: string
